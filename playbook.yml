---
- hosts: 127.0.0.1
  connection: local
  tasks:
  - name: Copy all configs to user home directory
    synchronize:
      src: configs/
      dest: "~"
      owner: no
  - name: install autoconf
    package:
      name: autoconf
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install automake
    package:
      name: automake
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install cvs
    package:
      name: cvs
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install libtool
    package:
      name: libtool
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install libxcb
    package:
      name: libxcb
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install xorg-macros
    package:
      name: xorg-macros
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install xcb-util
    package:
      name: xcb-util
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install gcc-7
    package:
      name: gcc-7
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install ruby
    package:
      name: ruby
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install cmake
    package:
      name: cmake
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install doxygen
    package:
      name: doxygen
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install dtrace
    package:
      name: dtrace
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install jdk
    package:
      name: jdk
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install zlib
    package:
      name: zlib
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install harfbuzz
    package:
      name: harfbuzz
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install libpng
    package:
      name: libpng
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install freetype-2
    package:
      name: freetype-2
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install fontconfig
    package:
      name: fontconfig
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install libcanberra
    package:
      name: libcanberra
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install imagemagick
    package:
      name: imagemagick
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install pygments
    package:
      name: pygments
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install glib2
    package:
      name: glib2
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install cairo
    package:
      name: cairo
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install gtk-doc
    package:
      name: gtk-doc
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install pygobject-3
    package:
      name: pygobject-3
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install clang
    package:
      name: clang
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'
  - name: install flex
    package:
      name: flex
      state: present
    become: true
    become_method: sudo
    become_user: root
    become_flags: '-H'


  # Import gnome-terminal profiles
  - name: Import gnome-terminal profiles
    shell: dconf load /org/gnome/terminal/legacy/profiles:/ < "{{playbook_dir}}/import/gnome-terminal-profiles.dconf"

  # BUILD NodeJS 10 from source, if its not installed
  #- stat:
  #    path: /opt/nodejs
  #  register: nodejs_dir
  #- debug:
  #    msg: "NodeJS is build and installed already"
  #  when: nodejs_dir.stat.isdir is defined and nodejs_dir.stat.isdir
  #- name: clean build dir for NodeJS
  #  file: path=/tmp/node-v10.16.2 state=absent
  #  when: not nodejs_dir.stat.exists
  #- name: build NodeJS from source
  #  shell: cd /tmp && wget https://nodejs.org/dist/v10.16.2/node-v10.16.2.tar.gz && tar xvzf node-v10.16.2.tar.gz && cd node-v10.16.2 && PATH="/usr/gnu/bin:/sbin:$PATH" ./configure --prefix=/opt/nodejs && PATH="/usr/gnu/bin:/sbin:$PATH" make && PATH="/usr/gnu/bin:/sbin:$PATH" sudo -H make install
  #  when: not nodejs_dir.stat.exists

  # BUILD gcc-9.2.0 from source
  - stat:
      path: /opt/gcc-9.2.0
    register: gcc920_dir
  - debug:
      msg: "gcc-9.2.0 is build and installed already"
    when: gcc920_dir.stat.isdir is defined and gcc920_dir.stat.isdir
  - name: clean source dir for gcc-9.2.0
    file: path=/var/tmp/gcc-9.2.0 state=absent
    when: not gcc920_dir.stat.exists
  - name: clean build dir for gcc-9.2.0
    file: path=/var/tmp/gcc-9.2.0-build state=absent
    when: not gcc920_dir.stat.exists
  - name: build gcc-9.2.0 from source
    shell: cd /var/tmp && mkdir gcc-9.2.0-build && wget https://ftp.gnu.org/gnu/gcc/gcc-9.2.0/gcc-9.2.0.tar.gz && tar xvzf gcc-9.2.0.tar.gz && cd gcc-9.2.0 && ./contrib/download_prerequisites && cd ../gcc-9.2.0-build && PATH="/usr/gnu/bin:$PATH" AS=gas LD=ld CC=gcc ../gcc-9.2.0/configure --prefix=/opt/gcc-9.2.0 --with-gnu-as --target x86_64-pc-solarlis2.11 && gmake -j2 && sudo -H gmake install
    when: not gcc920_dir.stat.exists

  # BUILD harfbuzz from source (higher version is required by kitty), if its not installed
  - stat:
      path: /opt/harfbuzz
    register: harfbuzz_dir
  - debug:
      msg: "harfbuzz is build and installed already"
    when: harfbuzz_dir.stat.isdir is defined and harfbuzz_dir.stat.isdir
  - name: clean build dir for harfbuzz
    file: path=/tmp/harfbuzz state=absent
    when: not harfbuzz_dir.stat.exists
  - name: build harfbuzz from source
    shell: cd /tmp && wget https://github.com/harfbuzz/harfbuzz/archive/2.5.3.tar.gz && (tar xzf 2.5.3.tar.gz || true) && cd harfbuzz-2.5.3 && CFLAGS=-m64 CPPFLAGS=-m64 LDFLAGS=-m64 PATH="/usr/gnu/bin/:$PATH" ./autogen.sh --prefix=/opt/harfbuzz && CFLAGS=-m64 CPPFLAGS=-m64 LDFLAGS=-m64 PATH="/usr/gnu/bin/:$PATH" make && CFLAGS=-m64 CPPFLAGS=-m64 LDFLAGS=-m64 PATH="/usr/gnu/bin/:$PATH" sudo -H make install
    when: not harfbuzz_dir.stat.exists

  # BUILD kitty terminal emulator from source, if its not installed
  - stat:
      path: /opt/kitty
    register: kitty_dir
  - debug:
      msg: "kitty is build and installed already"
    when: kitty_dir.stat.isdir is defined and kitty_dir.stat.isdir
  - name: clean build dir for kitty
    file: path=/tmp/kitty state=absent
    when: not kitty_dir.stat.exists
  - name: build kitty from source
    shell: cd /tmp && git clone https://github.com/kovidgoyal/kitty && cd kitty && CFLAGS="-Wno-error=implicit-function-declaration -Wno-error=return-type -Wno-error=unused-variable -Wno-error=unknown-pragmas" PKG_CONFIG_PATH="/opt/harfbuzz/lib/pkgconfig:$PKG_CONFIG_PATH" PATH="/usr/gnu/bin:$PATH" make
    when: not kitty_dir.stat.exists
 
  # BUILD libev from source, if its not installed
  - stat:
      path: /opt/libev
    register: libev_dir
  - debug:
      msg: "libev is build and installed already"
    when: libev_dir.stat.isdir is defined and libev_dir.stat.isdir
  - name: clean build dir for libev
    file: path=/tmp/libev state=absent
    when: not libev_dir.stat.exists
  - name: build libev from source
    shell: cd /tmp && cvs -z3 -d :pserver:anonymous@cvs.schmorp.de/schmorpforge co libev && cd /tmp/libev && patch -p0 < "{{playbook_dir}}/patches/libev/patch.diff" && PATH="/usr/gnu/bin:$PATH" libtoolize --force && aclocal && PATH="/usr/gnu/bin:$PATH" autoheader && PATH="/usr/gnu/bin:$PATH" automake --force-missing --add-missing && autoconf && PATH="/opt/developerstudio12.6/bin:/usr/gnu/bin/:$PATH" CC="/opt/developerstudio12.6/bin/cc" CFLAGS=-g ./configure --prefix /opt/libev && PATH="/opt/developerstudio12.6/bin:/usr/gnu/bin:$PATH" make && PATH="/opt/developerstudio12.6/bin:/usr/gnu/bin/:$PATH" sudo -H make install
    when: not libev_dir.stat.exists

  # BUILD xcb-util-xrm from source, if its not installed
  - stat:
      path: /opt/xcb-util-xrm
    register: xcb_util_xrm_dir
  - debug:
      msg: "xcb-util-xrm is build and installed already"
    when: xcb_util_xrm_dir.stat.isdir is defined and xcb_util_xrm_dir.stat.isdir
  - name: clean build dir for xcb-util-xrm
    file: path=/tmp/xcb-util-xrm state=absent
    when: not xcb_util_xrm_dir.stat.exists
  - name: build xcb-util-xrm
    shell: cd /tmp && git clone --recursive https://github.com/Airblader/xcb-util-xrm.git && cd /tmp/xcb-util-xrm && git submodule update --init && PATH="/opt/developerstudio12.6/bin:/usr/gnu/bin/:$PATH" CC="/opt/developerstudio12.6/bin/cc" CFLAGS=-g ./autogen.sh --prefix=/opt/xcb-util-xrm && PATH="/opt/developerstudio12.6/bin:/usr/gnu/bin/:$PATH" CC="/opt/developerstudio12.6/bin/cc" make && PATH="/opt/developerstudio12.6/bin:/usr/gnu/bin/:$PATH" CC="/opt/developerstudio12.6/bin/cc" sudo -H make install
    when: not xcb_util_xrm_dir.stat.exists

  # BUILD yajl from source, if its not installed
  - stat:
      path: /opt/yajl
    register: yajl_dir
  - debug:
      msg: "yajl is build and installed already"
    when: yajl_dir.stat.isdir is defined and yajl_dir.stat.isdir
  - name: clean build dir for yajl
    file: path=/tmp/yajl state=absent
    when: not yajl_dir.stat.exists
  - name: build yajl
    shell: cd /tmp && git clone https://github.com/lloyd/yajl.git && cd yajl && CC="/opt/developerstudio12.6/bin/cc" ./configure --prefix /opt/yajl && make && sudo -H make install
    when: not yajl_dir.stat.exists

  # BUILD i3-gaps from source, if its not installed
  - stat:
      path: /opt/i3-gaps
    register: i3_gaps_dir
  - debug:
      msg: "i3-gaps is build and installed already"
    when: i3_gaps_dir.stat.isdir is defined and i3_gaps_dir.stat.isdir
  - name: clean build dir for i3-gaps
    file: path=/tmp/i3-gaps state=absent
    when: not i3_gaps_dir.stat.exists
  - name: install i3-gaps
    shell: cd /tmp && git clone https://www.github.com/Airblader/i3.git i3-gaps && cd /tmp/i3-gaps && git checkout release-4.16.1 && git apply "{{playbook_dir}}/patches/i3-gaps/patch.diff" && autoreconf --force --install && rm -rf build/ && mkdir -p build && cd build/ && PKG_CONFIG_PATH="/opt/yajl/share/pkgconfig:/opt/xcb-util-xrm/lib/pkgconfig:$PKG_CONFIG_PATH" CFLAGS='-I/opt/libev/include -I/opt/xcb-util-xrm/include -I/opt/yajl/include' LDFLAGS='-L/opt/libev/lib -L/opt/xcb-util-xrm/lib -L/opt/yajl/lib' PATH="/usr/gnu/bin:$PATH" ../configure --prefix=/opt/i3-gaps --sysconfdir=/etc --datarootdir=/usr/share --disable-sanitizers --disable-debug --enable-docs --enable-mans && PATH="/usr/gnu/bin:$PATH" make -j8 && PATH="/usr/gnu/bin:$PATH" sudo -H make install
